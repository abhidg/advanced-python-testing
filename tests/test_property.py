"""
Property based testing
Testing module using hypothesis
"""
import json
from pathlib import Path

import pytest
from hypothesis import given, reject, settings
from hypothesis.strategies import floats, integers

from sunblock import fahrenheit_to_celsius, find_sun

# In property based testing, we encode assumptions or properties of the
# system that should always be true, regardless of parameter values a
# function takes. Often this reveals edge cases that are not handled in
# the code, which might not have been caught by example-based testing if
# our list of examples was not exhaustive enough.

# Here we check that no matter what temperature in degrees fahrenheit we
# are given, we never return a value less than absolute zero (0 K) which
# is equivalent to -273.15 degrees celsius.


@given(floats(min_value=-450.0))
def test_fahrenheit_to_celsius(temp):
    try:
        assert fahrenheit_to_celsius(temp) > -273.15  # absolute zero
    except ValueError:
        reject()


# hypothesis can also be used to intentionally find counter-examples
# here we are trying to find an example where the numerical values of a
# temperature in celsius and fahrenheit are the same. This should fail
# as there is a counterexample (-40 F = -40 C) but hypothesis may not
# find it. Try increasing the max_examples setting to make hypothesis
# stumble upon the correct answer!
@given(integers(min_value=-450))
@settings(max_examples=5)
def test_fahrenheit_differs_from_celsius(temp):
    try:
        assert fahrenheit_to_celsius(temp) != temp
    except ValueError:
        reject()


# Test that a range of sunblock lengths does not crash the program
@given(num_hours=integers(min_value=1, max_value=23))
def test_find_sun(num_hours, openmeteo_data):
    block = find_sun(openmeteo_data, num_hours, now="2024-08-22T06:00")
    if block.message != "No sunny interval found":
        assert block.num_hours == num_hours
        # This is not true everywhere of course, but should be true
        # for the sample data that we are using here
        # Ideally the sample data would also be autogenerated, perhaps
        # using hypothesis-jsonschema and the function tested in a variety
        # of geographical locations
        assert 4 <= block.start.time().hour < 23

        # Extremely unlikely in our test sample to have 4h contiguous sun
        assert num_hours < 4
